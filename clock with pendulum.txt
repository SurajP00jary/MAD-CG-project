#include <math.h>
#include <GL/glut.h>

using namespace std;

float angle = 135;
float inc = 0.010;
float angleHour = 0, angleMin = 0,
angleSec = 0,
clockR = 80.0f,
minStart = 0.9f,
minEnd = 1.0f,
stepStart = 0.8f,
stepEnd = 1.0f;

void reshape(int w, int h) {
	glMatrixMode(GL_PROJECTION);  //maps camera to screen
	glLoadIdentity();
	gluPerspective(100, (GLfloat)w / (GLfloat)h, 0.5, 100.0);
	glMatrixMode(GL_MODELVIEW);   // maps objects to local coordinates
}

void drawCircle(float segments, float radius, float sx, float sy)
{
	glBegin(GL_LINE_LOOP);
	for (int ii = 0; ii < segments; ii++)
	{
		float theta = 2.0f * 3.1415926f * float(ii) / float(segments);//get the current angle 

		float x = radius * cosf(theta);//calculate the x component 
		float y = radius * sinf(theta);//calculate the y component 

		glVertex2f(x + sx, y + sy);// vertex of circles 

	}
	glEnd();
}
void drawCircles(float x1, float y1, float angle) {
	float segments = 25;
	float radius = 20.0;
	// Draw the original circle
	glLineWidth(4);
	glColor3f(1, 1, 1);
	drawCircle(segments, radius, x1, y1);

	glColor3f(1, 0, 1);
	glLineWidth(7);
	glPushMatrix();
	glTranslatef(0, 0, 0);
	glPushMatrix();
	glRotatef(-angleMin, 0, 0, 1);
	glPushMatrix();
	glTranslatef(0, 0, 0);
	glBegin(GL_LINES);  //minute line  
	glVertex2f(x1, y1);
	glVertex2f(17, 10);
	glEnd();

	glColor3f(1, 1, 0);
	glLineWidth(6); //time line
	glPushMatrix();
	glTranslatef(0, 0, 0);
	glPushMatrix();
	glRotatef(-angleHour, 0, 0, 1);
	glPushMatrix();
	glTranslatef(0, 0, 0);
	glBegin(GL_LINES);
	glVertex2f(x1, y1);
	glVertex2f(17, 1);
	glEnd();
	//the following is for second hand
	glColor3f(0.0f, 0.0f, 1.0f);
	glPushMatrix();
	glTranslatef(0, 0, 0);
	glPushMatrix();
	glRotatef(-angleSec, 0, 0, 1);
	glPushMatrix();
	glTranslatef(0, 0, 0);
	glBegin(GL_LINES);
	glVertex2i(x1, y1);
	glVertex2i(-10, -12);
	glEnd();
	 //Draw the pendulum circle
	double radian = angle * 3.14 / 180;
	float y2 = 40 * cos(radian);
	float x2 = 25 * sin(radian);
	radius = 2.0;

	glColor3f(1, 1, 1);
	drawCircle(segments, radius, x2, y2);

	glBegin(GL_LINES);    // vertex of lines
	glVertex2f(x1, -2.8);
	glVertex2f(x2, y2);
	glEnd();


	glFlush();


}
void numbers()
{
	glRasterPos2i(18,0);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '3');
	glRasterPos2i(0, -19);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '6');
	glRasterPos2i(-19, 0);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '9');
	glRasterPos2i(-1, 17);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '1');
	glRasterPos2i(0, 17);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '2');
	glRasterPos2i(9, 15);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '1');
	glRasterPos2i(15, 9);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '2');
	glRasterPos2i(16, -9);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '4');
	glRasterPos2i(10, -16);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '5');
	glRasterPos2i(-11, -16);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '7');
	glRasterPos2i(-17, -9);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '8');
	glRasterPos2i(-17, 8);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '1');
	glRasterPos2i(-16, 8);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '0');
	glRasterPos2i(-9, 15);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '1');
	glRasterPos2i(-10, 15);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, '1');
}




void display(void) {

	//for clock circle
	
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	glTranslatef(-5, 10, -30);
	glColor3f(1, 1, 1);

	if (angle > 225) {
		angle = 225;
		inc = -inc;
	}
	if (angle < 125) {
		angle = 125;
		inc = -inc;
	}
	angle += inc;
	drawCircles(0, 0, angle);
	numbers();
	glutSwapBuffers();
	glEnd();



}

void rotate()
{
	if (angleSec < 360)
	{
		angleSec += 0.03;
	}
	else
	{
		angleSec = 0;
	}
	if (angleMin < 360)
	{
		angleMin += 0.00085;
	}
	else
	{
		angleMin = 0;
	}
	if (angleHour < 360)
	{
		angleHour += 0.0000146;
	}
	else
	{
		angleHour = 0;
	}
	glutPostRedisplay();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE); //double buffered bit-mask
	glutInitWindowSize(800, 600);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("A Pendulum");

	glutDisplayFunc(display);
	glutIdleFunc(display);
	glutReshapeFunc(reshape);
	//glutIdleFunc(rotate);
	glutMainLoop();
	return 0;
}